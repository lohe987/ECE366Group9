# create a 0 register at r0
SAR     0
MOVI    0
# first I need to get to address 8192
SAR     6
ADDI    3
ADDI    3
ADDI    3
ADDI    3
ADDI    1
# r6 = 13
SAR     7
ADDI    1
SLL     6
# r7 = 0x2000
# save  this address in MEM[0]
STOR    0
# just to make it easily available
# load target into r1
SAR     1
LOAD    7
# create a counter at r2 and set to 19
SAR     2
ADD     6
ADDI    3
ADDI    3
# r2 = 19
# set the branch register to be _ more than PC for branch
# check the main counter to see if it is less than 0
SAR     3
MOVI    3
ADDI    1
SPC     3 
SAR     0
BSLT    2
STOP
# if branch then it hits this code
# create an array pointer which is r4 = r2 * 4
SAR     3
MOVI    2
SAR     4
MOV     2
SLL     3
# r4 = r2 << r3 (r4 = maincounter << 2)
# now I need to get to the pattern (0x200c)
SAR     3
MOVI    3
MLT     3
ADDI    3
# get MEM[0] to get the 0x2000 address location value
SAR     7
LOAD    0
ADD     3
# r7 = 0x200c
SAR     5
LOAD    7
# r5 = pattern 1
# now I want to check the pattern
# create a register with 1 in it and 32 in it
# need to save the score into a register
# I also need to reset r7 to 0x2000
# and I need to also do r2 = r2 - 1
# I also need to find someway to get back
SAR     3
MOVI    1
SAR     6
MOVI    3
MLT    6
ADD     6
ADD     6
ADDI    -4
# r6 = 32
# r3 = 1
# check the counter
# make pc - enough instructions to get back to the other part (31 + amount it take to make 31(9))
SAR     7
MOVI    3
MLT     7
ADD     7
ADD     7
ADDI    3
ADDI    2
SAR     0
MOVI    -1
SAR     7
MLT     0
SPC     7
# if counter is less than 0 then jump to check the maint counter
BSLT    0