# create a 0 register at r0
00000000
11011000
# first I need to get to address 8192
00000110
01100011
01100011
01100011
01100011
11100001
# r6 = 13
10000111
11100001
10100110
# r7 = 0x2000
# save  this address in MEM[0]
10111000
# just to make it easily available
# load target into r1
10000001
10110111
# create a counter at r2 and set to 19
10000010
10001110
01100011
01100011
# r2 = 19
# set the branch register to be _ more than PC for branch
# check the main counter to see if it is less than 0
00000011
11011011
11100001
11101011
00000000
11010010
11111111
# if branch then it hits this code
# create an array pointer which is r4 = r2 * 4
00000011
01011010
10000100
00010010
10100011
# r4 = r2 << r3 (r4 = maincounter << 2)
# now I need to get to the pattern (0x200c)
00000011
11011011
01001011
01100011
# get MEM[0] to get the 0x2000 address location value
10000111
00110000
10001011
# r7 = 0x200c
00000101
10110111
# r5 = pattern 1
# now I want to check the pattern
# create a register with 1 in it and 32 in it
# need to save the score into a register
# I also need to reset r7 to 0x2000
# and I need to also do r2 = r2 - 1
# I also need to find someway to get back
# check the value in memory and update the value
00000000
11011000
10000111
00110000
01100011
11100001
10000100
10110111
# continue with checking logic
00000011
01011001
00000110
11011011
01001110
10001110
10001110
11100100
# r6 = 32
# r3 = 1
# check the counter
# make pc - enough instructions to get back to the other part (31 + amount it take to make 31(9))
10000111
11011011
11001111
00001111
00001111
01100011
11100010
00000000
01011111
10000111
01001000
01101111
# if counter is less than 0 then jump to check the main counter
01010000
# continue with checking the bits
# create a register with 1
# just make it r0 for now then change it back
00000000
01011001
# now get the value of the first bit in target and pattern
10000100
00010001
00011000
# bit 1 of target is now in 4
00000110
10010101
00011000
# bit 1 of pattern is now in 6
# now get the and of 4 and 6 into 6
10011100
# score in r3 so add r6 to r3 and jump back
00000011
10001110
# get next bits
10000001
10100000
00000101
10100000
# jump back 36 + ins from 115
00000110
11011011
01001110
10001110
10001110
10001011
10001011
10001011
10001011
10001011
00000000
01011111
00000110
01001000
00000000
11101110
01110111
